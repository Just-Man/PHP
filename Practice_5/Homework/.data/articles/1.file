{"category":"2","articleTitle":"Writing Next Generation Reusable JavaScript Modules in ECMAScript 6","articleContent":"<p>Are you excited to <strong>take advantage of new JavaScript language features<\/strong> but not sure <em>where<\/em> to start, or <em>how<\/em>? You&rsquo;re not alone! I&rsquo;ve spent the better part of the last year and a half trying to ease this pain. During that time there have been some amazing quantum leaps in JavaScript tooling.<\/p>\r\n<p>These leaps have made it possible for you and me to dive head first into writing fully ES6 modules, without compromising on the essentials like testing, linting and (most importantly) the ability for others to easily consume what we write.<\/p>\r\n<figure><a style=\"border: 0px none;\" href=\"https:\/\/github.com\/lukehoban\/es6features\"><img src=\"https:\/\/media-mediatemple.netdna-ssl.com\/wp-content\/uploads\/2016\/02\/js-opt.png\" alt=\"Writing Next Generation Reusable JavaScript Modules\" width=\"500\" height=\"500\" \/><\/a><br \/>\r\n<figcaption>ECMAScript 6 is here. An <a href=\"https:\/\/github.com\/lukehoban\/es6features\">overview of fancy and useful features in the new version of JavaScript<\/a>.<\/figcaption>\r\n<\/figure>\r\n<p>In this post, we&rsquo;re going to focus on <strong>how to create a JavaScript package written in ES6<\/strong> that&rsquo;s usable in a site or app regardless of whether you&rsquo;re using CommonJS, asynchronous module definition (AMD) or plain browser global modules.<\/p>\r\n<blockquote>\r\n<p><strong>Wait, is it ES6 or ES2015?<\/strong> My habits certainly prefer ES6, but the name was recently and officially changed to ES2015. However, there&rsquo;s a greater level of awareness of ES6, which is how I will refer to it in this post.<\/p>\r\n<p>I&rsquo;d also like to give special thanks to <a href=\"https:\/\/twitter.com\/dougneiner\">Doug Neiner<\/a> and <a href=\"https:\/\/twitter.com\/rpniemeyer\">Ryan Niemeyer<\/a> &ndash; both have shared this journey into better ES6 tooling. This post wouldn&rsquo;t have been possible without them.<\/p>\r\n<\/blockquote>\r\n<h3 id=\"the-tools\">The Tools <a class=\"sr hsl\" href=\"https:\/\/www.smashingmagazine.com\/2016\/02\/writing-next-generation-reusable-javascript-modules\/#the-tools\">Link<\/a><\/h3>\r\n<p>In parts 1 and 2 of this series, we&rsquo;ll look at some of the tools that make this possible. Today we&rsquo;ll cover writing, transpiling and packaging our library; and in part 2 we&rsquo;ll focus on linting, formatting and testing (using JSCS, ESLint, mocha, Chai, Karma and Istanbul). Meet your new best friends for part 1:<\/p>\r\n<ul>\r\n<li><a href=\"http:\/\/babeljs.io\/\">Babel<\/a> (which just celebrated its first birthday) has made the process of transpiling ES6 to ES5 not only simple, but <em>pleasant<\/em>.<\/li>\r\n<li><a href=\"http:\/\/webpack.github.io\/\">webpack<\/a> silenced every aspect of the &ldquo;module wars&rdquo; on my team by letting us consume <em>everything<\/em> (CommonJS, AMD and ES6) with aplomb. It turns out that webpack also does a fantastic job of packaging standalone ES6 libraries &ndash; a fact we will look at closely during this post.<\/li>\r\n<li><a href=\"http:\/\/gulpjs.com\/\">Gulp<\/a> is a powerful tool for automating build-related tasks.<\/li>\r\n<\/ul>\r\n<h3 id=\"the-goal\">The Goal <a class=\"sr hsl\" href=\"https:\/\/www.smashingmagazine.com\/2016\/02\/writing-next-generation-reusable-javascript-modules\/#the-goal\">Link<\/a><\/h3>\r\n<h4 id=\"write-in-es6-use-in-es5\">Write In ES6, Use In ES5 <a class=\"sr hsl\" href=\"https:\/\/www.smashingmagazine.com\/2016\/02\/writing-next-generation-reusable-javascript-modules\/#write-in-es6-use-in-es5\">Link<\/a><\/h4>\r\n<p>We&rsquo;re going to talk about writing ES6 client-side <em>libraries<\/em>, not bundling entire sites or apps. (This is really any reusable bit of code you&rsquo;d like to share between projects, whether it&rsquo;s an open source software project or something you use internally at work between applications.) <em>&ldquo;Wait a second&rdquo;<\/em>, you might be thinking. <em>&ldquo;Won&rsquo;t it be a while until the browser range I have to support can handle ES6?&rdquo;<\/em><\/p>\r\n<p>That&rsquo;s correct! However, I mentioned <a href=\"http:\/\/babeljs.io\/\">Babel<\/a> above because we&rsquo;re going to use it to convert our ES6 to ES5, making it a practical option to use today for most situations.<\/p>\r\n<h4 id=\"make-it-easy-for-anyone-to-consume\">Make It Easy For Anyone To Consume <a class=\"sr hsl\" href=\"https:\/\/www.smashingmagazine.com\/2016\/02\/writing-next-generation-reusable-javascript-modules\/#make-it-easy-for-anyone-to-consume\">Link<\/a><\/h4>\r\n<p>The second part of our goal is to write a module that we could use in most common module ecosystems. Die-hard AMD fan? You get a module. CommonJS plus browserify the only song you sing? And <em>you<\/em> get a module. Not sure what the AMD versus CommonJS fuss is about, and you just want to drop the <code>&lt;script&gt;<\/code> tag on the page and go? <em>You<\/em> get a module too! It&rsquo;s a bit like an Oprah module giveaway &ndash; where the part of Oprah is played by <a href=\"http:\/\/webpack.github.io\/\">webpack<\/a>. webpack will help package our module in a special wrapper called a <a href=\"https:\/\/github.com\/umdjs\/umd\">universal module definition (UMD)<\/a>, making it possible to consume in any of the above scenarios.<\/p>","date":"13:08:07 08.02.2016"}